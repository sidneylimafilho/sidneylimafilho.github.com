---
author: Sidney Lima Filho
layout: default
---


<div class="post-wall" data-bind='template: { name: getTemplate, foreach: Items }'></div>

<div id="postTemplate" style="display:none">
    <div class="widget" data-bind="attr:{style:'background-image:url('+ (object && object.image) +');'}">
        <a data-bind="attr:{href: object.url}">
            <resume>
                <time>
                    <day data-bind="text: moment(date).format('DD')"></day>
                    <month data-bind="text: moment(date).format('MMM').toUpperCase()"></month>
                    <year data-bind="text: moment(date).format('YYYY').toUpperCase()"></year>
                </time>
                <div class="title" data-bind="text: object.title"></div>
                
                <small class="excerpt" data-bind="text: object.excerpt"></small>                
            </resume>
        </a>
        <a target="_blank" data-bind="attr:{class: 'button ' + type, href: $root.User[type].getUrl(), title: $root.User[type].title}"></a>
    </div>
</div>

<div id="videoTemplate" style="display:none">
    <div class="widget" data-bind="attr:{style:'background-image:url('+ object.thumbnail.hqDefault +');'}">        
        <!-- <iframe width="600" height="300" frameborder="0" allowfullscreen="yes" ></iframe> 
        <img width="300" data-bind="attr:{src: object.thumbnail.hqDefault, title: object.title}" /> -->
        <a href="javascript:;" data-bind="click:$root.User.youtube.showVideo">
            <resume>
                <time>
                    <day data-bind="text: moment(date).format('DD')"></day>
                    <month data-bind="text: moment(date).format('MMM').toUpperCase()"></month>
                    <year data-bind="text: moment(date).format('YYYY').toUpperCase()"></year>
                </time>
                <div class="title" data-bind="text: object.title"></div>  
                <small class="excerpt" data-bind="text: object.description"></small>                          
            </resume>
        </a>
        <a target="_blank" data-bind="attr:{class: 'button youtube', href: $root.User.youtube.getUrl(), title: $root.User.youtube.title}"></a>       
    </div>
</div>

<div id="tweetTemplate" style="display:none">
    <div class="widget twitter">
        <table>
            <tr><td data-bind="text: object.text"></td></tr>
            <tr><td data-bind="text: moment(date).format('DD/MM/YYYY')"></td></tr>
        </table>
        
        <a target="_blank" data-bind="attr:{class: 'button ' + type, href: $root.User[type].getUrl(), title: $root.User[type].title}"></a>
    </div>
</div>

<div id="bookmarkTemplate" style="display:none">
    <div class="widget">
        <a data-bind="attr:{href: object.url}">
            <resume>
                <b data-bind="text: object.title"></b>
                <small data-bind="text: moment(date).format('DD/MM/YYYY')"></small>                           
            </resume>
        </a>
        <a target="_blank" data-bind="attr:{class: 'button ' + type, href: $root.User[type].getUrl(), title: $root.User[type].title}"></a>
    </div>
</div>

<div id="slideTemplate" style="display:none">
    <div class="widget" data-bind="attr:{style:'background-image:url('+ object.mediaGroups[0].contents[0].thumbnails[0].url +');'}">        
        <!-- <iframe width="600" height="300" frameborder="0" allowfullscreen="yes" ></iframe> 
        <img width="300" data-bind="attr:{src: object.thumbnail.hqDefault, title: object.title}" /> -->
        <a data-bind="attr:{href: object.link}">
            <resume>
                <time>
                    <day data-bind="text: moment(date).format('DD')"></day>
                    <month data-bind="text: moment(date).format('MMM').toUpperCase()"></month>
                    <year data-bind="text: moment(date).format('YYYY').toUpperCase()"></year>
                </time>
                <div class="title" data-bind="text: object.title"></div>                        
            </resume>
        </a>
        <a target="_blank" data-bind="attr:{class: 'button ' + type, href: $root.User[type].getUrl(), title: $root.User[type].title}"></a>       
    </div>
</div>

<nav>    
    <a href="javascript:;" target="_blank" class="button facebook" title="Minha vida social no Facebook."></a>
    <a href="javascript:;" target="_blank" class="button linkedin" title="Minha rede profissional no Linkedin."></a>
    <a href="javascript:;" target="_blank" class="button feed" title="Assine meus posts com o RSS."></a>                
    <a href="javascript:;" target="_blank" class="button slideshare" title="Veja meus slides no Slideshare."></a>
    <a href="javascript:;" target="_blank" class="button github" title="O que desenvolvo e coloco no Github."></a>
    <a href="javascript:;" target="_blank" class="button youtube" title="Filmes que assisto via Youtube."></a>
    <a href="javascript:;" target="_blank" class="button mail" title="Clique aqui para me enviar uma mensagem."></a>
</nav>

<script type="text/javascript">
    function ViewModel() { 
        var it = this;
        this.User = {
            name: "sidneylimafilho",
            mail: "https://docs.google.com/spreadsheet/viewform?formkey=dEtLSzNWdXlnanJMdTN6WmtQb2VnMlE6MQ",
            gravatar : "http://1.gravatar.com/avatar/13c12ed8bb09f191876ae217829b15ed?size=96",
            github: "sidneylimafilho",
            socialMediaLoaded: function(){

            },
            slideshare: {
                name: "sidneylimafilho",
                title: "Veja meus slides no Slideshare.",
                getUrl: function(){ return "http://www.slideshare.net/" + this.name; },
                getApiFeedUrl: function(){ return "http://www.slideshare.net/rss/user/" + this.name ;},
                loadItems : function(){   
                 var apresentacoes = new google.feeds.Feed(this.getApiFeedUrl());
                    apresentacoes.load(function(result) {
                        var temp;
                        Enumerable.From(result.feed.entries).Take(6)
                        .ForEach(function(slide, index){
                            var temp = Enumerable.From(it.Items()).Where(function($){ 
                                return $.date < new Date(slide.publishedDate);
                            }).First();
                            var start = Enumerable.From(it.Items()).IndexOf(temp);
                            
                            it.Items.splice(start, 0, {
                                    template: "slideTemplate", 
                                    type: "slideshare", 
                                    date: new Date(slide.publishedDate),
                                    object: slide 
                                });
                        }); 
                        
                                              
                    });                    
                }
            },
            facebook: "sidneylimafilho",
            linkedin: "sidneylimafilho",
            twitter: {
                name: "sidneylimafilho",
                title: "Pensamentos rápidos via Twitter.",
                getUrl: function(){ return "http://twitter.com/" + this.name; },
                getApiFeedUrl: function(){ return "http://api.twitter.com/1/statuses/user_timeline.json?screen_name=" + this.name + "&callback=?";},
                loadItems : function(){                                   
                    $.getJSON(this.getApiFeedUrl(), function(json) {                        
                        Enumerable.From(json).Where("!$.in_reply_to_status_id && !$.in_reply_to_user_id").Take(6)
                        .ForEach(function(tweet, index){                           
                            var start = Math.random() * it.Items().length; // coloca em ordem aleatória
                            
                            it.Items.splice(start, 0, {
                                template: "tweetTemplate", 
                                type: "twitter", 
                                date: new Date(new Date().getYear(), Math.random() * 12, 1),
                                object: tweet
                            });
                        });
                        
                        
                    });
                }
            },      
            youtube: {
                name: "TheSidneyLimaFilho",
                title: "Filmes que assisto via Youtube.",
                getUrl: function(){ return "http://www.youtube.com/user/"+ this.name; },
                embedUrl: "http://www.youtube.com/embed/",            
                getApiFeedUrl: function(){ return "http://gdata.youtube.com/feeds/api/users/"+ this.name +"/favorites?alt=jsonc&v=2"; },
                showVideo: function(video){                    
                    $("overlay")
                    .show(0).animate({opacity:1}, 1000, function(){
                        $(this)
                        .click(function(){ it.User.youtube.closeVideo(); })
                        .find("div")
                        .html('<iframe width="854" height="510" src="' + it.User.youtube.embedUrl + video.object.id + '" frameborder="0" allowfullscreen></iframe>');
                    });                    
                },
                closeVideo: function(){
                    $("overlay").animate({opacity:0}, 1000, function(){
                        $(this).hide().find("div").html("");
                    });
                },
                loadItems: function(){                
                    $.getJSON(this.getApiFeedUrl(), function(json) {
                        // bubble sort
                        Enumerable.From(json.data.items).Where("$.video.accessControl.embed === 'allowed'").Take(6)
                        .ForEach(function(value, index){
                            var temp = Enumerable.From(it.Items()).Where(function($){ 
                                return $.date < new Date(value.created);
                            }).First();
                            var start = Enumerable.From(it.Items()).IndexOf(temp);
                            
                            it.Items.splice(start, 0, {
                                template: "videoTemplate",                                 
                                date: new Date(value.created),
                                object: value.video
                            });
                        });
                    });                    
                }
            },         
            feed: {            
                title: "Assine meus posts com o RSS.",
                getUrl: function(){ return "/rss.xml"; },
                loadItems: function(){
                    Enumerable.From(posts).OrderByDescending("$.date")
                    .ForEach(function(post, index){
                        it.Items.push({
                            template: "postTemplate", 
                            date: new Date(post.date), 
                            type: "feed", 
                            object: post
                        });
                    });                    
                }
            },
            delicious: {
                name: "sidneylimafilho",
                tag: "Favorite",
                getUrl: function(){ return "http://delicious.com/"+ this.name; },
                getApiFeedUrl: function(){ return "http://feeds.delicious.com/v2/json/" + this.name + "/" + this.tag + "?callback=?"; },
                loadItems: function(){    
                    return false; // temporariamente cancelado pois será feito no layout            
                    $.getJSON(this.getApiFeedUrl(), function(json) {
                        Enumerable.From(json).Take(6)
                        .ForEach(function(value, index){
                            var temp = Enumerable.From(it.Items()).Where(function($){ 
                                return $.date < new Date(value.dt);
                            }).First();
                            var start = Enumerable.From(it.Items()).IndexOf(temp);
                            
                            it.Items.splice(start, 0, {
                                template: "bookmarkTemplate", 
                                date: new Date(value.dt), 
                                type: "delicious", 
                                object: {url: value.u, title: value.d, date: value.dt }
                            });
                        });

                        
                    });
                    
                }
            }
        };
    }

    ViewModel.prototype.Items = ko.observableArray([]);
    ViewModel.prototype.getTemplate = function(item) {return item.template;}
    ViewModel.prototype.Initialize = function() {
        var it = this;
        it.User.socialMediaLoaded = 0;
        it.User.feed.loadItems();
        it.User.youtube.loadItems();
        it.User.twitter.loadItems();  
        it.User.delicious.loadItems();                 
        google.load("feeds", "1");
        google.setOnLoadCallback(function feeds() { it.User.slideshare.loadItems(); });            

        ko.applyBindings(it);
    };
   

    (vm = new ViewModel()).Initialize();

</script>

